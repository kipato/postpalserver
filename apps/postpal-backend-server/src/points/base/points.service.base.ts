/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Points as PrismaPoints,
  User as PrismaUser,
} from "@prisma/client";

export class PointsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PointsCountArgs, "select">): Promise<number> {
    return this.prisma.points.count(args);
  }

  async pointsItems<T extends Prisma.PointsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PointsFindManyArgs>
  ): Promise<PrismaPoints[]> {
    return this.prisma.points.findMany<Prisma.PointsFindManyArgs>(args);
  }
  async points<T extends Prisma.PointsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PointsFindUniqueArgs>
  ): Promise<PrismaPoints | null> {
    return this.prisma.points.findUnique(args);
  }
  async createPoints<T extends Prisma.PointsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PointsCreateArgs>
  ): Promise<PrismaPoints> {
    return this.prisma.points.create<T>(args);
  }
  async updatePoints<T extends Prisma.PointsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PointsUpdateArgs>
  ): Promise<PrismaPoints> {
    return this.prisma.points.update<T>(args);
  }
  async deletePoints<T extends Prisma.PointsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PointsDeleteArgs>
  ): Promise<PrismaPoints> {
    return this.prisma.points.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.points
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
