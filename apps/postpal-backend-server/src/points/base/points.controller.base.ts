/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PointsService } from "../points.service";
import { PointsCreateInput } from "./PointsCreateInput";
import { Points } from "./Points";
import { PointsFindManyArgs } from "./PointsFindManyArgs";
import { PointsWhereUniqueInput } from "./PointsWhereUniqueInput";
import { PointsUpdateInput } from "./PointsUpdateInput";

export class PointsControllerBase {
  constructor(protected readonly service: PointsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Points })
  async createPoints(@common.Body() data: PointsCreateInput): Promise<Points> {
    return await this.service.createPoints({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        totalPoints: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Points] })
  @ApiNestedQuery(PointsFindManyArgs)
  async pointsItems(@common.Req() request: Request): Promise<Points[]> {
    const args = plainToClass(PointsFindManyArgs, request.query);
    return this.service.pointsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        totalPoints: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Points })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async points(
    @common.Param() params: PointsWhereUniqueInput
  ): Promise<Points | null> {
    const result = await this.service.points({
      where: params,
      select: {
        createdAt: true,
        id: true,
        totalPoints: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Points })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePoints(
    @common.Param() params: PointsWhereUniqueInput,
    @common.Body() data: PointsUpdateInput
  ): Promise<Points | null> {
    try {
      return await this.service.updatePoints({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          totalPoints: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Points })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePoints(
    @common.Param() params: PointsWhereUniqueInput
  ): Promise<Points | null> {
    try {
      return await this.service.deletePoints({
        where: params,
        select: {
          createdAt: true,
          id: true,
          totalPoints: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
